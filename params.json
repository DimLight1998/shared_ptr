{"name":"Shared ptr","tagline":"A minimal light and fast shared_ptr implementation designed to handle cases where boost/std::shared_ptr are not available","body":"shared_ptr is a minimal implementation of smart pointer, a subset of the C++11 std::shared_ptr or boost::shared_ptr.\r\n\r\n### The goals of this minimal shared_ptr are:\r\n\r\n- to replace the C++11 std::shared_ptr and boost::shared_ptr where they are not availlable\r\n- to be a header only implementation\r\n- to keep dependencies to a minimum (STL)\r\n- to be portable\r\n- to be light and fast\r\n- to be monothreaded (not thread-safe)\r\n- to use a permissive MIT license, similar to BSD or Boost, for proprietary/commercial usage\r\n\r\n### Limitations\r\n- not thread-safe\r\n- not safe if the raw pointer stored is not of the same type as the template parameter\r\n\r\n### Suported platforms:\r\n\r\nDevelopements and tests are done under the following OSs :\r\n- Debian 7 (testing)\r\n- Ubuntu 12.10\r\n- Windows XP/7/8\r\nAnd following IDEs/Compilers\r\n- GCC 4.7.x with a provided Makefile\r\n- Eclipse CDT under Linux, using the provided Makefile\r\n- Visual Studio Express 2008/2010/2012 for testing compatibility purpose\r\n\r\n### Dependencies:\r\n\r\n - a STL implementation (even an old one, like those provided with VC6/eVC4 should work)\r\n\r\n### Installation\r\n\r\nTo use this shared_ptr implementation, you only need to include the shared_ptr.hpp file\r\nfrom the source code of your projects.\r\n\r\n### License\r\n\r\nCopyright (c) 2013 Sébastien Rombauts (sebastien.rombauts@gmail.com)\r\n\r\nDistributed under the MIT License (MIT) (See accompanying file LICENSE.txt\r\nor copy at http://opensource.org/licenses/MIT)\r\n\r\n## Getting started\r\n### About std::shared_ptr:\r\n- http://en.cppreference.com/w/cpp/memory/shared_ptr\r\n- http://www.cplusplus.com/reference/memory/shared_ptr/\r\n\r\n### About boost::shared_ptr:\r\n- http://www.boost.org/libs/smart_ptr/shared_ptr.htm\r\n\r\n### First sample demonstrates how to create a shared_ptr to a class Xxx:\r\n\r\nThe Xxx class:\r\n```C++\r\nclass Xxx\r\n{\r\npublic:\r\n    Xxx(void);\r\n    ...\r\n    doSomething(size_t len);\r\n    ...\r\n};\r\n```\r\n\r\nshared_ptr usage:\r\n```C++\r\nvoid func(void)\r\n{\r\n    // Create an empty (ie. NULL) p1 shared_ptr\r\n    shared_ptr<Xxx> xPtr;\r\n\r\n    if (true)\r\n    {\r\n        // Create a new Xxx object, and give its ownership to the yPtr shared_ptr\r\n        shared_ptr<Xxx> yPtr(new Xxx());\r\n        \r\n        // Access members functions/variables like with a raw pointer\r\n        yPtr->doSomething(1024);\r\n        \r\n        // Share ownership by making a copy of the shared_ptr (the reference counter reachs 2)\r\n        xPtr = yPtr;\r\n        \r\n    } // yPtr is destroyed, but xPtr retains the ownership of the object\r\n\r\n    ...   \r\n    \r\n} // xPtr is destroyed, the reference counter drops to 0 thus the object is destroyed and the memory freed\r\n```\r\n\r\n## How to contribute\r\n### GitHub website\r\nThe most efficient way to help and contribute to this wrapper project is to\r\nuse the tools provided by GitHub:\r\n- please fill bug reports and feature requests here: https://github.com/SRombauts/shared_ptr/issues\r\n- fork the repository, make some small changes and submit them with pull-request\r\n\r\n### Contact\r\nYou can also email me directly, I will answer any questions and requests.\r\n\r\n### Coding Style Guidelines\r\nThe source code use the CamelCase naming style variant where :\r\n- type names (class, struct, typedef, enums...) begins with a capital letter\r\n- files (.cpp/.h) are named like the class they contains\r\n- function and variable names begins with a lower case letter\r\n- member variables begins with a 'm', function arguments begins with a 'a', boolean with a 'b', pointers with a 'p'\r\n- each file, class, method and member variable is documented using Doxygen tags\r\nSee also http://www.appinf.com/download/CppCodingStyleGuide.pdf for good guidelines\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}